Datatypes in JS: Javascript is dynamically typed language. The datatype is decided by type of data the variable holds.when value changes, datatype also changes.
Primarily datatypes are divided as two types
   i. primitive datatypes
   ii. Non Primitive Datatypes

i. Primitive Datatypes: These datatypes are used to represent variables that holds single value.Mostly used Primitive types are
   a. number
   b. string
   c. boolean
   d. null
   e. undefined
ii. Non Primitive Datatypes: These datatypes are used to represent variables that holds collection of values. They are
   a. functions
   b. Arrays
   c. objects

To find the datatype of a variable, we can use an operator called 
"typeof variable_name"

Type conversion: Javascript can convert one datatype into another data type called type conversion or type casting
     --> Implicit Type casting: JS can automatically converts datatypes based on operations called Implicit Type casting
     --> Explicit Type Casting : we can convert datatypes using external operators or keywords called Explicit Type casting

     eg:  console.log(5+'5') //55  -- Implicit
          console.log(5+Number('5')) -- Explicit

Primitive Data Types:
=====================
a. Number: number is used to store any numerical values like intergers, decimal etc.., 
      let a=10.84; // datatype of a is number
    numbers have default functions like

    console.log(b.toFixed(2)) // round figure the value upto 2 digits after decimal
console.log(b.toPrecision(3)) // round figure the value upto total digits
b = 25;
console.log(b.toString(2))// converts number to string of binary

//Math Methods
console.log(Math.max(5, 6, 1, 2, 9)) // returns maximum value
console.log(Math.min(5, 6, 1, 2, 9))  // returns minimum value
console.log(Math.pow(2, 3))  // returns a power b
console.log(Math.sqrt(16)) //returns square root
console.log(Math.cbrt(27)) //returns cube root
console.log(Math.abs(-10)) //returns always positive value
console.log(Math.ceil(-1.16)) // returns nearest larger value
console.log(Math.floor(1.8)) // returns nearest lower value
console.log(Math.round(2.53)) //rounds upto nearest integer
console.log(Math.round(Math.random() * 10000)) // returns random number between 0 to 1
// generate 4 digit OTP using math random
// generate dice value in ludo
console.log(Math.ceil(Math.random() * 6))



ii. strings : strings are used to represent a collection of characters. JS can represent strings in three ways 
      a. single quotes
      b. double quotes
      c. backticks
  There is no difference between single or double quotes, but for better readability use any one through out the code
  backticks : strings can be represented as backticks.it is used to represent dynamic strings. it is also called Template literal. The dynamic values are represented between ${}
  eg: let x=20;
  console.log(`The value of x is ${x}`)

  strings also have default Methods such as
  i. length -- length is used to return total number of characters
  ii. toUpperCase() -- return uppercase conversion of given string
  iii. toLowerCase() -- return lowercase conversion of given string
  iv. startsWith(str) -- checks whether string is starting with str or not
  v. endssWith(str) -- checks whether string is ending with str or not
  vi. trim() -- remove leading and ending spaces of given string
  vii. replace(old,new) -- replace first occurrence of old string with new string
  viii. replaceAll(old,new) -- replaces all occurrences of old string with new string
  ix. indexOf(char) -- returns index of first occurrence of given character in string
  x. lastIndexOf(char) -- returns index of last occurrence of given character in string
  xii. charAt(index) -- returns character at given index in string
  xiii. slice(start,end) -- returns sub string from starting index to ending index
  xiv. split(delimiter) -- returns array of splitted strings based on delimiter
  xv. concat(str) -- add str string to original string

  Boolean: boolean is used to store true or false. when convert to numerical, true can be 1 and false can be 0

  undefined: undefined is the accidental absence of value. The variable is declared but value is not assigned, it considered it as undefined
  let a;
  console.log(a)  //undefined
  console.log(b)  //not defined -- error

  null : null is the intentional absence of value. 
  let a = null;
  console.log(a);

  





















   



